<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<template xmlns="http://ws.apache.org/ns/synapse" name="getPlaceSearch">
    <parameter name="latitude"
               description="The latitude of the location this tweet refers to."/>
    <parameter name="longitude"
               description="The longitude of the location this tweet refers to"/>
    <parameter name="query"
               description="Free-form text to match against while executing a geo-based query"/>
    <parameter name="ip"
               description="This is the minimal granularity of place types to return and must be one of: poi, neighborhood, city, admin or country"/>
    <parameter name="granularity"
               description="When set to either true, t or 1, each Tweet returned in a timeline will include a user object including only the status authors numerical ID"/>
    <parameter name="accuracy"
               description="A hint on the “region” in which to search. If a number, then this is a radius in meters, but it can also take a string that is suffixed with ft to specify feet. If this is not passed in, then it is assumed to be 0m. If coming from a device, in practice, this value is whatever accuracy the device has measuring its location"/>
    <parameter name="maxResults"
               description="If you upload Tweet media that might be considered sensitive content such as nudity, violence, or medical procedures, you should set this value to true"/>
    <parameter name="containedWithin"
               description="The latitude of the location this tweet refers to."/>
    <sequence>

        <class name="org.wso2.carbon.connector.twitter.RemoveTwitterContext"/>

        <property name="uri.var.latitude" expression="$func:latitude"/>
        <property name="uri.var.longitude" expression="$func:longitude"/>
        <property name="uri.var.query" expression="$func:query"/>
        <property name="uri.var.ip" expression="$func:ip"/>
        <property name="uri.var.granularity" expression="$func:granularity"/>
        <property name="uri.var.accuracy" expression="$func:accuracy"/>
        <property name="uri.var.maxResults" expression="$func:maxResults"/>
        <property name="uri.var.containedWithin" expression="$func:containedWithin"/>

        <script language="js">
            <![CDATA[
                // optional url param variables
                var latitude  = mc.getProperty('uri.var.latitude');
                var longitude  = mc.getProperty('uri.var.longitude');
                var query  = mc.getProperty('uri.var.query');
                var ip  = mc.getProperty('uri.var.ip');
                var granularity  = mc.getProperty('uri.var.granularity');
                var accuracy  = mc.getProperty('uri.var.accuracy');
                var maxResults  = mc.getProperty('uri.var.maxResults');
                var containedWithin  = mc.getProperty('uri.var.containedWithin');

                var uriParams = '';


                if (latitude != null && latitude != "") {
                    uriParams += 'lat='+latitude + '&';
                    latitude='lat=' + encodeURIComponent(latitude);
                    mc.setProperty('uri.var.latitude',latitude)
                }
                if (longitude != null && longitude != "") {
                    uriParams +='long=' + longitude + '&';
                    longitude='long=' + encodeURIComponent(longitude);
                    mc.setProperty('uri.var.longitude',longitude)
                }
                if (query != null && query != "") {
                    uriParams += 'query=' +query + '&';
                    query='query=' + encodeURIComponent(query);
                    mc.setProperty('uri.var.query',query)
                }
                if (ip != null && ip != "") {
                    uriParams += 'ip=' +ip + '&';
                    ip='ip=' + encodeURIComponent(ip);
                    mc.setProperty('uri.var.ip',ip)
                }
                if (granularity != null && granularity != "") {
                    uriParams += 'granularity=' + granularity + '&';
                    granularity='granularity=' + encodeURIComponent(granularity);
                    mc.setProperty('uri.var.granularity',granularity)
                }
                if (accuracy != null && accuracy != "") {
                    uriParams += 'accuracy=' +accuracy + '&';
                    accuracy='accuracy=' + encodeURIComponent(accuracy);
                    mc.setProperty('uri.var.accuracy',accuracy)
                }
                if (maxResults != null && maxResults != "") {
                    uriParams += 'max_results=' + maxResults + '&';
                    maxResults='max_results=' + encodeURIComponent(maxResults);
                    mc.setProperty('uri.var.maxResults',maxResults)
                }
                if (containedWithin != null && containedWithin != "") {
                    uriParams += 'contained_within=' +containedWithin + '&';
                    containedWithin='contained_within=' + encodeURIComponent(containedWithin);
                    mc.setProperty('uri.var.containedWithin',containedWithin)
                }

                if(uriParams != ''){
                    mc.setProperty('uri.var.uriParams' , uriParams.substring(0, uriParams.length-1));
                }
            ]]>
        </script>

        <property name="uri.var.apiUrl.final"
                  expression="fn:concat(get-property('uri.var.apiUrl'),'/1.1/geo/search.json')"/>

        <property name="uri.var.httpMethod"
                  value="GET"/>

        <class name="org.wso2.carbon.connector.twitter.TwitterSignatureGeneration"/>

        <header name="Authorization" expression="get-property('uri.var.signature')"
                scope="transport"/>

        <call>
            <endpoint>
                <http method="get"
                      uri-template="{+uri.var.apiUrl}/1.1/geo/search.json?{+uri.var.uriParams}"/>
            </endpoint>
        </call>

        <!-- Remove custom header information in response -->
        <header name="x-access-level" scope="transport" action="remove"/>
        <header name="x-twitter-response-tags" scope="transport" action="remove"/>
        <header name="x-transaction" scope="transport" action="remove"/>
        <header name="x-response-time" scope="transport" action="remove"/>
        <header name="x-connection-hash" scope="transport" action="remove"/>
        <header name="x-content-type-options" scope="transport" action="remove"/>
        <header name="x-frame-options" scope="transport" action="remove"/>
        <header name="x-rate-limit-limit" scope="transport" action="remove"/>
        <header name="x-rate-limit-remaining" scope="transport" action="remove"/>
        <header name="x-rate-limit-reset" scope="transport" action="remove"/>
        <header name="x-xss-protection" scope="transport" action="remove"/>

    </sequence>
</template>